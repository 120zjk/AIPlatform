name: Build and deploy Python app to Azure Web App - aiplatform01

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Debug - Check files
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== Directory contents ==="
          ls -la
          echo "=== Check requirements.txt ==="
          if [ -f "requirements.txt" ]; then
            echo "✅ requirements.txt found"
            cat requirements.txt
          else
            echo "❌ requirements.txt NOT found"
          fi

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "Virtual environment activated"
          python --version
          pip --version
      
      - name: Install dependencies
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed:"
          pip list

      - name: Create startup script
        run: |
          cat > startup.py << 'EOF'
          import os
          import sys
          
          # Add backend to Python path
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))
          
          try:
              from app import app
              print("Successfully imported Flask app")
          except ImportError as e:
              print(f"Import error: {e}")
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
              from app import app
          
          if __name__ == '__main__':
              port = int(os.environ.get('PORT', 8000))
              print(f"Starting app on port {port}")
              app.run(host='0.0.0.0', port=port, debug=False)
          EOF

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            .
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7A957EEC5D2347048B6871267262ADD1 }}
          tenant-id:
